package rules
import com.example.demo.model.Log
import com.example.demo.model.LogMode
import com.example.demo.model.LogStatus
import com.example.demo.model.AdminAlarm
import com.example.demo.model.AlarmTriggering
import com.example.demo.service.AdminAlarmService
import com.example.demo.service.AlarmTriggeringService
import com.example.demo.service.MaliciousIpAddressService

global AdminAlarmService alarmService
global AlarmTriggeringService alarmTriggeringService
global MaliciousIpAddressService ipAddressService


rule "Log with malicious IP address"

    when
		Log(ipAddressService.hasIpAddress(ipAddress), $ipAddress: ipAddress)
    then
        alarmTriggeringService.save(new AlarmTriggering("Log with malicious" + $ipAddress + " IP address appeared!!"));

end

rule "Alarm for SUCCESS status"
	no-loop

    when
		accumulate(
			Log($log: this, mode == LogMode.ATTACK, status == LogStatus.SUCCESS),
			$logsCount: count($log)
		)
		Number(intValue <= $logsCount) from accumulate(
			AdminAlarm(status == LogStatus.SUCCESS, $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($logsCount + " number of SUCCESS logs appeared in the last minute!!"));

end

rule "Alarm for INFO status"
	no-loop

    when
		accumulate(
			Log($log: this, mode == LogMode.ATTACK, status == LogStatus.INFO),
			$logsCount: count($log)
		)
		Number(intValue <= $logsCount) from accumulate(
			AdminAlarm(status == LogStatus.INFO, $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($logsCount + " number of INFO logs appeared in the last minute!!"));

end

rule "Alarm for WARNING status"
	no-loop

    when
		accumulate(
			Log($log: this, mode == LogMode.ATTACK, status == LogStatus.WARNING),
			$logsCount: count($log)
		)
		Number(intValue <= $logsCount) from accumulate(
			AdminAlarm(status == LogStatus.WARNING, $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($logsCount + " number of WARNING logs appeared in the last minute!!"));

end

rule "Alarm for ERROR status"
	no-loop

    when
		accumulate(
			Log($log: this, mode == LogMode.ATTACK, status == LogStatus.ERROR),
			$logsCount: count($log)
		)
		Number(intValue <= $logsCount) from accumulate(
			AdminAlarm(status == LogStatus.ERROR, $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($logsCount + " number of ERROR logs appeared in the last minute!!"));

end

rule "Alarm for FATAL status"
	no-loop

    when
		accumulate(
			Log($log: this, mode == LogMode.ATTACK, status == LogStatus.FATAL),
			$logsCount: count($log)
		)
		Number(intValue <= $logsCount) from accumulate(
			AdminAlarm(status == LogStatus.FATAL, $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($logsCount + " number of FATAL logs appeared in the last minute!!"));

end
