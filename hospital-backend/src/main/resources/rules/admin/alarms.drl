package rules
import com.example.demo.model.Log
import com.example.demo.model.LogMode
import com.example.demo.model.AdminAlarm
import com.example.demo.model.AlarmTriggering
import com.example.demo.service.AdminAlarmService
import com.example.demo.service.AlarmTriggeringService

global AdminAlarmService alarmService
global AlarmTriggeringService alarmTriggeringService


rule "Alarm for log status"
	no-loop

    when
		accumulate(
			Log($log: this, mode.equals(LogMode.ATTACK), $status: status),
			$logSet: collectSet($status),
			$logList: collectList($status),
			$count: count($log)
		)
		eval($logSet.size() == 1)
		Number(intValue <= $count) from accumulate(
			AdminAlarm(status, param.equalsIgnoreCase($logList.get(0) + ""), $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($count + " number of logs with " + $logList.get(0) + " status appeared in the last minute!!"));

end

rule "Alarm for log description"
	no-loop

    when
		accumulate(
			Log($log: this, mode.equals(LogMode.ATTACK), $description: description, $ipAddress: ipAddress),
			$logSet: collectSet($description),
			$logList: collectList($description),
			$count: count($log),
			$ipAddressSet: collectSet($ipAddress)
		)
		eval($logSet.size() == 1 && $ipAddressSet.size() == 1)
		Number(intValue <= $count) from accumulate(
			AdminAlarm(!status, param.equalsIgnoreCase($logList.get(0) + ""), $counts: counts) from alarmService.findAll(),
			min($counts)
		)
    then
        alarmTriggeringService.save(new AlarmTriggering($count + " number of attempts on '" + $logList.get(0) + "' action appeared in the last minute from the same IP address!"));

end
